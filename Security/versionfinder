#!/bin/bash
# Software Version finder by James Dooley
# Locates common web programs on a server and checks the version to see if it is up to date

#This should not need to be updated
#Format is function;Display Name;Minimum Version;Current Version
#Do note that there can not be spaces in the ID strings.
scans=""
scans="$scans drupal7;Drupal7;7;7.22"
scans="$scans drupal6;Drupal6;6;6.28"
scans="$scans e107;e107;1;1.0.3"
scans="$scans joomla15;Joomla_1.5;1.5;1.5.999" # EOL; No longer offered on site
scans="$scans joomla17;Joomla_1.7;1.7.999;1.7.999" # EOL; No longer offered on site
scans="$scans joomla25;Joomla_2.5;2.5;2.5.11"
#Need signature for Joomla 3.1
scans="$scans mambo;Mambo_CMS;4.6;4.6.5"
scans="$scans mediawiki;MediaWiki;1.20;1.20.5"
scans="$scans openx;OpenX;2.8;2.8.10"
scans="$scans oscommerce2;osCommerce2;2.3;2.3.3"
scans="$scans phpbb3;phpBB3;3.0;3.0.11"
scans="$scans piwigo;Piwigo;2.5;2.5.1"
scans="$scans redmine;Redmine;1.3;1.4.4" # Needs Checked against new major release (2.3.1)
scans="$scans wordpress;WordPress;3.5;3.5.1"
scans="$scans xcart;X-Cart;4.5;4.5.5"
scans="$scans xoops;XOOPS;2.5;2.5.6"
scans="$scans zencart;ZenCart;1.5;1.5.1"

function getcpanelusers {
	cpanelusers=$(/bin/ls -A1 /var/cpanel/users/)
	echo "$cpanelusers"
}

function getcpaneldir {
	#$1 user name
	echo $(/scripts/gethomedir $1) 
}

function getpleskdomains {
	pleskdomains=$(/bin/ls -A1 /var/www/vhosts)
	echo "$pleskdomains"
}

function getcoredomains {
	apache_config=$(`which httpd` -V 2>/dev/null)
	if [[ $apache_config ]]; then
		apache_config_file=$(echo "$apache_config" | grep HTTPD_ROOT | cut -d '"' -f2)"/"$(echo "$apache_config" | grep SERVER_CONFIG_FILE | cut -d '"' -f2)
		return
	fi
	nginx_config=$(`which nginx` -V 2>/dev/null)
	if [[ $nginx_config ]]; then
		nginx_config_file=$(for i in $(echo "$nginx_config"); do grep "confpath" | cut -d '=' -f2; done)
		return
	fi 
}

function init {
	if [[ -d "/var/cpanel" ]]; then
	#cPanel found, will scan per user -> domain -> sub directory
		if [[ ! $specificuser ]]; then
			cpanelusers=$(getcpanelusers)
		else
			cpanelusers=$specificuser
		fi
		output=""
		accounts=$(echo "$cpanelusers" | wc -w)
		curacct=0 
		for user in $cpanelusers; do
			curacct=$(( $curacct + 1 ))
			echo -e "\r\e[0;32m===[$curacct / $accounts] Scanning $user===\e[0m\c" >&2
			homedir=$(getcpaneldir $user)
			if [[ -d "$homedir" ]]; then
				for scan in ${scans}; do
					scanfunc=$(echo "$scan" | cut -d ";" -f1)
					toutput="$($scanfunc $homedir $scan)"
					if [[ $toutput ]]; then
						if [[ $output ]]; then
							output="$output\n$toutput"
						else
							output=$toutput
						fi
					fi
				done
			fi
			echo -e "\r`printf "%$(tput cols)s"`\c" >&2
		done
		echo -e "\r\e[0;32m===Completed===\e[0m" >&2
		if [[ $output ]]; then
			echo -e "$output"
		fi
	elif [[ -d "/usr/local/psa" ]]; then
		if [[ ! $specificuser ]]; then
			pleskdomains=$(getpleskdomains)
		else
			pleskdomains=$specificuser
		fi
		output=""
		accounts=$(echo "$pleskdomains" | wc -l)
		curacct=0
		for domain in $pleskdomains; do
			curacct=$(( $curacct + 1 ))
			echo -e "\r\e[0;32m===[$curacct / $accounts] Scanning $domain===\e[0m\c" >&2
			homedir="/var/www/vhosts/$domain"
			if [[ -d "$homedir" ]]; then
				for scan in ${scans}; do
					scanfunc=$(echo "$scan" | cut -d ";" -f1)
					toutput="$($scanfunc $homedir $scan)"
					if [[ $toutput ]]; then
						if [[ $output ]]; then
							output="$output\n$toutput"
						else
							output=$toutput
						fi
					fi
				done
			fi
			echo -e "\r$(printf "%$(tput cols)s")\c" >&2
		done
		echo -e "\r\e[0;32m===Completed===\e[0m" >&2
		if [[ $output ]]; then
			echo -e "$output"
		fi
	else
		domains=$(getcoredomains)
	fi
}

function printresult {
	#$1 scan string
	#$2 version found
	#$3 location
	program=$(echo "$1" | cut -d ';' -f2)
	minver=$(echo "$1" | cut -d ';' -f3)
	curver=$(echo "$1" | cut -d ';' -f4)
	insver="$2"
	
	if [[ ! $csvformat ]]; then
		#Add tabs based on program name size
		if [[ $(echo "$program" | wc -c) -lt 9 ]]; then
			program="$program\t\t"
		else
			program="$program\t"
		fi
		
		#Add tabs based on version name size
		if [[ $(echo "$insver" | wc -c) -lt 9 ]]; then
			insver="$insver\t\t"
		else
			insver="$insver\t"
		fi
	fi
	
	if [[ ! $2 ]]; then
		echo -e "$program ===Signature match but no version returned === $3"
		return
	fi

	if [[ ! $csvformat ]]; then 	
		if [[ ! $reportonly ]]; then
			if [ $2 \< $curver ]; then
				if [ $2 \< $minver ]; then
					echo -e "$program\e[0;31m$insver\e[0m$3"
				else
					echo -e "$program\e[0;33m$insver\e[0m$3"
				fi
			else
				if [[ ! $showonlyold ]]; then
					echo -e "$program\e[0;32m$insver\e[0m$3"
				fi
			fi
		else
			if [ $2 \< $curver ]; then
				echo -e "$program$insver$3"
			else
				if [[ ! $showonlyold ]]; then
					echo -e "$program$insver$3"
				fi
			fi
		fi
	else
		if [ $2 \< $curver ]; then
			echo "$program,$insver,$3"
		else
			if [[ ! $showonlyold ]]; then
				echo "$program,$insver,$3"
			fi
		fi
	fi
}

function printsigs {
	echo -e "Program Name\tWarn Ver\tCur Ver"
	for sig in ${scans}; do
		program=$(echo $sig | cut -d ";" -f2)
		minver=$(echo $sig | cut -d ";" -f3)
		curver=$(echo $sig | cut -d ";" -f4)
		if [[ $(echo "$program"| wc -c) -lt 9 ]]; then
			echo -e "$program\t\t$minver\t\t$curver"
		else
			echo -e "$program\t$minver\t\t$curver"
		fi
	done
	echo "";
	echo "Note: Version signatures ending in 999 are outdated and no longer offered on the web."
	echo "These are generally considered EOL packages since there will not be any security updates."
}
		
		 
######################### Signatures

function wordpress {
	#$1 directory to scan
	#$2 scan string
	idfiles=$(find  $1 -name wp-config.php | sed 's:[^/]*$::')
	for loc in ${idfiles}; do
		if [[ -e "$loc/wp-includes/version.php" ]]; then
			insver=$(grep "wp_version =" $loc/wp-includes/version.php | cut -d "'" -f2)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function joomla15 {
	idfiles=$(find  $1 -name joomla.php | xargs grep -l "Joomla.Legacy" | sed "s/includes\/joomla\.php//")
	for loc in ${idfiles}; do
		if [[ -e "$loc/CHANGELOG.php" ]]; then
			insver=$(grep "Stable Release" $loc/CHANGELOG.php | head -1 | awk '{print $2}')
			printresult $2 "$insver" "$loc"
		fi
	done
}

function joomla17 {
	idfiles=$(find  $1 -name web.config.txt | sed 's:[^/]*$::')
	for loc in ${idfiles}; do
		if [[ -e $loc/includes/version.php ]]; then
			insver=$(grep "RELEASE =" $loc/includes/version.php | cut -d "'" -f2)"."$(grep "DEV_LEVEL =" $loc/includes/version.php | cut -d "'" -f2)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function joomla25 {
	idfiles=$(find  $1 -name web.config.txt | sed 's:[^/]*$::')
	for loc in ${idfiles}; do
		if [[ ! -e $loc/includes/version.php ]]; then
			if [[ -e $loc/joomla.xml ]]; then
				insver=$(grep "<version>" $loc/joomla.xml | cut -d ">" -f2 | cut -d "<" -f1 | head -1)
				printresult $2 "$insver" "$loc"
			fi
		fi
	done
}

function oscommerce2 {
	idfiles=$(find  $1 -name "filenames.php" | xargs grep -l "osCommerce, Open Source E-Commerce Solutions"  | sed 's/includes\/filenames\.php//')
	for loc in ${idfiles}; do
		if [[ -e $loc/includes/version.php ]]; then
			insver=$(cat $loc/includes/version.php | head -1)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function xoops {
	idfiles=$(find  $1 -name xoops.css | sed 's:[^/]*$::')
	for loc in ${idfiles}; do
		if [[ -e $loc/includes/version.php ]]; then
			insver=$(grep "XOOPS_VERSION" $loc/includes/version.php | head -1 | cut -d "'" -f4 | awk '{print $2}')
			printresult $2 "$insver" "$loc"
		fi
	done
}

function e107 {
	idfiles=$(find  $1 -name e107_config.php | sed 's:[^/]*$::')
	for loc in ${idfiles}; do
		if [[ -e $loc/admin/ver.php ]]; then
			insver=$(grep "e107_version" $loc/admin/ver.php | head -1 | cut -d '"' -f2)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function mambo {
	idfiles=$(find  $1 -name mambofunc.php | sed 's/includes\/mambofunc\.php//')
	for loc in ${idfiles}; do
		if [[ -e $loc/includes/version.php ]]; then
			insver=$(grep "RELEASE =" $loc/includes/version.php | cut -d "'" -f2)"."$(grep "DEV_LEVEL =" $loc/includes/version.php | cut -d "'" -f2)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function mediawiki {
	idfiles=$(find  $1 -name DefaultSettings.php | xargs grep -il "mediawiki" | sed "s/includes\/DefaultSettings\.php//")
	for loc in ${idfiles}; do
		if [[ -e $loc/includes/DefaultSettings.php ]]; then
			insver=$(grep "wgVersion" $loc/includes/DefaultSettings.php | cut -d "'" -f2)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function piwigo {
	idfiles=$(find  $1 -name identification.php | xargs grep -l "Piwigo" | sed 's:[^/]*$::')
	for loc in ${idfiles}; do
		if [[ -e $loc/include/constants.php ]]; then
			insver=$(grep "PHPWG_VERSION" $loc/include/constants.php | cut -d "'" -f4)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function phpbb3 {
	idfiles=$(find  $1 -name bbcode.php | xargs grep -l "phpBB3" | sed "s/includes\/bbcode\.php//")
	for loc in ${idfiles}; do
		if [[ -e $loc/includes/constants.php ]]; then
			insver=$(grep "PHPBB_VERSION" $loc/includes/constants.php | cut -d "'" -f4)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function openx {
	idfiles=$(find  $1 -name OX.php | xargs grep -l "OpenX" | sed "s/lib\/OX\.php//")
	for loc in ${idfiles}; do
		if [[ -e $loc/constants.php ]]; then
			insver=$(grep "OA_VERSION" $loc/constants.php | cut -d "'" -f4)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function redmine {
	idfiles=$(find  $1 -name redmine.rb | xargs grep -l "redmine" | sed "s/lib\/redmine\.rb//")
	for loc in ${idfiles}; do
		if [[ -e $loc/doc/CHANGELOG ]]; then
			insver=$(grep "==" $loc/doc/CHANGELOG | head -2 | tail -1 | cut -d "v" -f2)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function drupal7 {
	idfiles=$(find  $1 -name authorize.php | xargs grep -l "Drupal" | sed 's:[^/]*$::')
	for loc in ${idfiles}; do
		if [[ -e $loc/includes/bootstrap.inc ]]; then
			insver=$(grep "VERSION" $loc/includes/bootstrap.inc | cut -d "'" -f4)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function drupal6 {
	idfiles=$(find  $1 -name database.mysql.inc | xargs grep -l "Drupal" | sed "s/includes\/database\.mysql\.inc//")
	for loc in ${idfiles}; do
		if [[ -e $loc/CHANGELOG.txt ]]; then
			insver=$(grep "Drupal" $loc/CHANGELOG.txt | head -1 | awk '{print $2}' | cut -d "," -f1)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function magento {
	idfiles=$(find $1 -name Mage.php | xargs grep -l "* Magento" | sed "s/app\/Mage\.php//")
	for loc in ${idfiles}; do
		if [[ -e $loc/RELEASE_NOTES.txt ]]; then
			insver=$(grep "====" $loc/RELEASE_NOTES.txt | head -1 | awk '{print $2}')
			printresult $2 "$insver" "$loc"
		fi
	done
}

function zencart {
	idfiles=$(find  $1 -name "filenames.php" | xargs grep -l "Zen Cart Development Team"  | sed 's/includes\/filenames\.php//')
	for loc in ${idfiles}; do
		if [[ -e $loc/includes/version.php ]]; then
			insver=$(grep "PROJECT_VERSION_MAJOR" $loc/includes/version.php | cut -d "'" -f4)"."$(grep "PROJECT_VERSION_MINOR" $loc/includes/version.php | cut -d "'" -f4)
			printresult $2 "$insver" "$loc"
		fi
	done
}

function xcart {
	idfiles=$(find  $1 -name "cart.php" | xargs grep -l "\| X-Cart"  | sed 's:[^/]*$::')
	for loc in ${idfiles}; do
		if [[ -e $loc/VERSION ]]; then
			insver=$(cat $loc/VERSION | awk '{print $2}' | head -1)
			printresult $2 "$insver" "$loc"
		fi
	done
}
######### Pre Init

until [[ -z $1 ]]; do
	case "$1" in
		--outdated)
			showonlyold='1'
			shift
			;;
		--user)
			specificuser=$2
			shift 2
			;;
		--report)
			reportonly='1'
			shift
			;;
		--csv)
			csvformat='1'
			shift
			;;
		--sigs)
			printsigs
			exit 1
			;;
        --help)
			echo "Usage: $0 [OPTION] [--user username]"
			echo "Scan server for known CMS versions and report what is found"
			echo " --outdated"
			echo "	Returns only outdated packages, does not print headings"
			echo " --report"
			echo "	Removes coloring format for easy export to file using > filename"
			echo " --csv"
			echo "	Prints output in CSV format."
			echo " --user <username>"
			echo "	Scans only user's account, use quotes for a providing a list of users"
			echo " --sigs"
			echo "	Print current list of program versions"
			exit 1
			;;
        *)
        	echo "Unknown option $1" >&2
        	shift
        	;;
	esac
done
init
