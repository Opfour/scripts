#!/bin/bash
EVENT="CVE-2015-7547-CENTOS"

# check the lock
LOCKFILE="/tmp/$EVENT.lock2"
if [ -f $LOCKFILE  ]; then
	echo "${EVENT}_RESULT=skipped=lockfile_present";
	exit 0;
fi
touch $LOCKFILE

function cleanup() {
	# apply cpanel rpm fix
	local CPRPMFIX="/usr/local/cpanel/scripts/check_cpanel_rpms"
	if [ -x $CPRPMFIX ]; then
		${CPRPMFIX} --fix > /dev/null 2>&1
	fi
	# update sonar
	local UPSONAR="/usr/local/lp/apps/sonarpush-helpers/sonarpush-helpers.sh"
	if [ -x $UPSONAR ]; then
		${UPSONAR} all > /dev/null 2>&1
	fi
	# clean up old kernels
	run_check 'package-cleanup -y --oldkernels --count=2' 'failed to cleanup old kernels'
	# remove the lockfile and exit
	rm -f $LOCKFILE
}

function run_check() {
	local CMD=$1
	local ERR=$2
	echo "=========================="
	echo "Running [$CMD]"
	echo "=========================="
	eval $CMD
	if [[ $? -ne 0 ]]; then
		echo "${EVENT}_DEBUG=$ERR"
	fi
}

function reboot_me() {
	swapoff -a
	touch /fastboot
	# do we have systemd?
	if [[ -x $(which systemctl) ]]
	then
		run_check 'systemctl reboot' 'we could not reboot??'
		exit 0
	else
		shutdown -r now "CVE-2015-7547 PATCH APPLIED - REBOOTING"
		exit 0
	fi
}

function reboot_or_not() {
	# check boot size (in megabytes)
	local BOOT_FREESPACE=$( df -m /boot/ |awk '/\/dev/{print$4}' )
	# reboot unless boot doesn't have enough space
	if [[ $BOOT_FREESPACE =~ ^[0-9]+$ ]]
	then
		if [[ $BOOT_FREESPACE -ge 5 ]]
		then
			reboot_me
		else
			echo "${EVENT}_RESULT=error=not_enough_boot_space"
			exit 1
		fi
	else
		echo "${EVENT}_RESULT=error=could_not_determine_boot_space"
		exit 1
	fi
}

INSTALLED_GLIBC_MAJOR_VERSION=$(rpm -q --queryformat '%{VERSION}' glibc)
INSTALLED_GLIBC_MAJOR_AND_RELEASE_VERSION=$(rpm -q --queryformat '%{VERSION}-%{RELEASE}\n' glibc | head -n1)
CENTOVERSION=$(cat /etc/redhat-release)
if [[ $(echo ${CENTOVERSION//[!0-9]/}) =~ ^[6] ]]; then
	PATCHED_VERSION='2.12-1.166.el6_7.7'
else
	PATCHED_VERSION='2.17-106.el7_2.4'
fi


# PATCHED_VERSION is not vulnerable.
if [ "${INSTALLED_GLIBC_MAJOR_AND_RELEASE_VERSION}" == "${PATCHED_VERSION}" ]; then
	run_check 'yum install lsof -y &> /dev/null' 'failed to install lsof'

	[[ $(lsof -d DEL) =~ "libc-" ]] && {
		echo "${EVENT}_RESULT=success=REBOOTING"
		cleanup;
		reboot_or_not
		exit 0
	}

	echo "${EVENT}_RESULT=skipped=NOTVULN"
	cleanup;
	exit 0
fi

if [ $(echo ${INSTALLED_GLIBC_MAJOR_VERSION//[!0-9]/}) -le 28 ] ; then
	echo "${EVENT}_RESULT=skipped=NOTVULN"
	cleanup;
	exit 0
fi

run_check 'yum clean all' 'yum clean failed'
run_check 'yum update glibc -y' 'yum update of glibc failed'

INSTALLED_GLIBC_FULL_VERSION_POST_UPDATE=$(rpm -q --queryformat '%{VERSION}-%{RELEASE}\n' glibc | head -n1)

if [ "${INSTALLED_GLIBC_FULL_VERSION_POST_UPDATE}" != "${PATCHED_VERSION}" ]; then
	echo "${EVENT}_RESULT=error=GLIBC_UPDATE_FAIL"
	cleanup;
	exit 1
else
	run_check 'yum install lsof -y &> /dev/null' 'failed to install lsof'

	[[ $(lsof -d DEL) =~ "libc-" ]] && {
		echo "${EVENT}_RESULT=success=REBOOTING"
		cleanup;
		reboot_or_not
		exit 0
	}

	echo "${EVENT}_RESULT=success=SUCCESS"
	cleanup;
	exit 0
fi
