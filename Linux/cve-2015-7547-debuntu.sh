#!/bin/bash
EVENT="CVE-2015-7547-DEBUNTU"

# check the lock
LOCKFILE="/tmp/$EVENT.lock2"
if [ -f $LOCKFILE  ]; then
	echo "${EVENT}_RESULT=skipped=lockfile_present";
	exit 0;
fi
touch $LOCKFILE

function cleanup() {
	# update sonar
	local UPSONAR="/usr/local/lp/apps/sonarpush-helpers/sonarpush-helpers.sh"
	if [ -x $UPSONAR ]; then
		${UPSONAR} all > /dev/null 2>&1
	fi
	# clean up old kernels
	run_check 'DEBIAN_FRONTEND=noninteractive apt-get autoremove -y' 'failed to cleanup old kernels'
	# remove the lockfile and exit
	rm -f $LOCKFILE
}

function run_check() {
	local CMD=$1
	local ERR=$2
	echo "=========================="
	echo "Running [$CMD]"
	echo "=========================="
	eval $CMD
	if [[ $? -ne 0 ]]; then
		echo "${EVENT}_DEBUG=$ERR"
	fi
}

function reboot_me() {
	touch /fastboot
	# do we have systemd?
	if [[ -x $(which systemctl) ]]
	then
		run_check 'systemctl reboot' 'we could not reboot??'
		exit 0
	else
		shutdown -r now "CVE-2015-7547 PATCH APPLIED - REBOOTING"
		exit 0
	fi
}

function reboot_or_not() {
	# check boot size (in megabytes)
	local BOOT_FREESPACE=$( df -m /boot/ |awk '/\/dev/{print$4}' )
	# reboot unless boot doesn't have enough space
	if [[ $BOOT_FREESPACE =~ ^[0-9]+$ ]]
	then
		if [[ $BOOT_FREESPACE -ge 5 ]]
		then
			reboot_me
		else
			echo "${EVENT}_RESULT=error=not_enough_boot_space"
			exit 1
		fi
	else
		echo "${EVENT}_RESULT=error=could_not_determine_boot_space"
		exit 1
	fi
}

INSTALLED_LIBC_MAJOR_VERSION=$(dpkg-query -W -f='${Version}' libc6)
DEBUNTUVERSION=$(lsb_release -r)
if [[ $(echo ${DEBUNTUVERSION//[!0-9]/}) =~ ^12 ]]; then
	GLIBC_PATCHED_VERSION_NUMERIC='21501013'
else
	GLIBC_PATCHED_VERSION_NUMERIC='219067'
fi

if [[ $(echo ${INSTALLED_LIBC_MAJOR_VERSION//[!0-9]/}) -ge ${GLIBC_PATCHED_VERSION_NUMERIC} ]] ; then
	run_check 'apt-get install lsof -y 2>&1>/dev/null' 'failed to install lsof'
        [[ $(lsof -d DEL) =~ "libc-" ]] && {
                echo "${EVENT}_RESULT=success=REBOOTING"
		cleanup;
		reboot_or_not
                exit 0
        }
        echo "${EVENT}_RESULT=skipped=NOTVULN"
	cleanup;
        exit 0
fi

export DEBIAN_FRONTEND=noninteractive

run_check 'apt-get clean 2>&1>/dev/null' 'failed to clean'
run_check 'apt-get update 2>&1>/dev/null' 'update failed'
run_check 'apt-get install --assume-no --only-upgrade libc6 -y 2>&1>/dev/null' 'upgrade failed'
run_check 'apt-get install --assume-no --only-upgrade sonarpush -y 2>&1>/dev/null' 'failed to update sonarpush'

INSTALLED_LIBC_MAJOR_VERSION_POST_UPDATE=$(dpkg-query -W -f='${Version}' libc6)

if [ "$(echo ${INSTALLED_LIBC_MAJOR_VERSION_POST_UPDATE//[!0-9]/})" != "${GLIBC_PATCHED_VERSION_NUMERIC}" ] ; then
        echo "${EVENT}_RESULT=error=GLIBC_UPDATE_FAIL"
	cleanup;
        exit 1
fi

run_check 'apt-get install lsof -y 2>&1>/dev/null' 'failed to install lsof'

[[ $(lsof -d DEL) =~ "libc-" ]] && {
	echo "${EVENT}_RESULT=success=REBOOTING"
	cleanup;
	reboot_or_not
	exit 0
}

echo "${EVENT}_RESULT=success=SUCCESS"
cleanup;
exit 0
